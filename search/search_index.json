{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hitfactorpy \u00b6 Python tools for parsing and analyzing practical match reports. Status \u00b6 Currently supports USPSA match reports. CLI Docs \u00b6 https://cahna.github.io/hitfactorpy/cli/ Library Docs \u00b6 See parsers available in hitfactorpy.parsers.match_report and examples in repository\u2019s tests directory .","title":"Introduction"},{"location":"#hitfactorpy","text":"Python tools for parsing and analyzing practical match reports.","title":"hitfactorpy"},{"location":"#status","text":"Currently supports USPSA match reports.","title":"Status"},{"location":"#cli-docs","text":"https://cahna.github.io/hitfactorpy/cli/","title":"CLI Docs"},{"location":"#library-docs","text":"See parsers available in hitfactorpy.parsers.match_report and examples in repository\u2019s tests directory .","title":"Library Docs"},{"location":"cli/","text":"CLI \u00b6 After installing, the hitfactorpy command should be added to $PATH . $ hitfactorpy --help If not, run it as a python module: $ python -m hitfactorpy --help Command: parse-match \u00b6 Convert a match report into JSON. $ hitfactorpy parse-match ./report.txt --json-indent 2 { \"name\": \"Paul Bunyan USPSA - January 2023 NW01\", \"raw_date\": \"01/08/2023\", \"date\": \"2023-01-08T00:00:00\", \"match_level\": 1, \"competitors\": [ # ( output truncated ) Command: json-schema \u00b6 Output the JSONSchema used to build parsed results. Show usage: $ hitfactorpy json-schema --help Show the default ( match-report ) JSONSchema: $ hitfactorpy json-schema Show JSONSchema for only the stage model and use a custom title: $ hitfactorpy json-schema --model stage --title \"My Custom-Titled Schema\"","title":"CLI"},{"location":"cli/#cli","text":"After installing, the hitfactorpy command should be added to $PATH . $ hitfactorpy --help If not, run it as a python module: $ python -m hitfactorpy --help","title":"CLI"},{"location":"cli/#command-parse-match","text":"Convert a match report into JSON. $ hitfactorpy parse-match ./report.txt --json-indent 2 { \"name\": \"Paul Bunyan USPSA - January 2023 NW01\", \"raw_date\": \"01/08/2023\", \"date\": \"2023-01-08T00:00:00\", \"match_level\": 1, \"competitors\": [ # ( output truncated )","title":"Command: parse-match"},{"location":"cli/#command-json-schema","text":"Output the JSONSchema used to build parsed results. Show usage: $ hitfactorpy json-schema --help Show the default ( match-report ) JSONSchema: $ hitfactorpy json-schema Show JSONSchema for only the stage model and use a custom title: $ hitfactorpy json-schema --model stage --title \"My Custom-Titled Schema\"","title":"Command: json-schema"},{"location":"linux-setup/","text":"Linux dev environment steps \u00b6 Prerequisites \u00b6 Install system dependencies \u00b6 poetry pyenv and its dependencies verify installation with pyenv doctor Setup pyenv for project \u00b6 pyenv virtualenv 3.10 hitfactorpy : create a virtualenv named \u201chitfactorpy\u201d using python v3.10 pyenv local hitfactorpy : configure pyenv to use \u201chitfactorpy\u201d for the current directory pyenv activate hitfactorpy : activate the virtualenv Configure poetry to recognize pyenv \u00b6 poetry config virtualenvs.prefer-active-python true Verify output of poetry env info ; the paths for Virtualenv and System should match the value of $PYENV_ROOT (default: $HOME/.pyenv ) Development \u00b6 Install dependencies: poetry install Test: poetry run tox Build: poetry build","title":"Linux+Pyenv"},{"location":"linux-setup/#linux-dev-environment-steps","text":"","title":"Linux dev environment steps"},{"location":"linux-setup/#prerequisites","text":"","title":"Prerequisites"},{"location":"linux-setup/#install-system-dependencies","text":"poetry pyenv and its dependencies verify installation with pyenv doctor","title":"Install system dependencies"},{"location":"linux-setup/#setup-pyenv-for-project","text":"pyenv virtualenv 3.10 hitfactorpy : create a virtualenv named \u201chitfactorpy\u201d using python v3.10 pyenv local hitfactorpy : configure pyenv to use \u201chitfactorpy\u201d for the current directory pyenv activate hitfactorpy : activate the virtualenv","title":"Setup pyenv for project"},{"location":"linux-setup/#configure-poetry-to-recognize-pyenv","text":"poetry config virtualenvs.prefer-active-python true Verify output of poetry env info ; the paths for Virtualenv and System should match the value of $PYENV_ROOT (default: $HOME/.pyenv )","title":"Configure poetry to recognize pyenv"},{"location":"linux-setup/#development","text":"Install dependencies: poetry install Test: poetry run tox Build: poetry build","title":"Development"}]}